name: Node.js CI

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Cache npm's local cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Compile java and typescrit, and assemble NPM package
        run: make
        env:
          # Don't require toolchains.xml as we know the exact Java version
          DISABLE_MAVEN_TOOLCHAIN: true
      - name: Upload jars
        uses: actions/upload-artifact@v2
        with:
          name: jars
          path: java/target/jars/
      - name: Upload NPM package
        uses: actions/upload-artifact@v2
        with:
          name: npm-package
          path: build/lib.cam-xslt-nailgun-*.tgz
  test:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x, 17.x]
        java-version: [11, 15]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set up JRE ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
          java-package: jre
      - name: Cache npm's local cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Download jars from build
        uses: actions/download-artifact@v2
        with:
          name: jars
          path: java/target/jars/
      - run: npm ci
      - run: npm test

  integration_test:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x, 17.x]
        java-version: [ 11, 15 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set up JRE ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
          java-package: jre
      - name: Cache npm's local cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Download npm-package from build
        uses: actions/download-artifact@v2
        with:
          name: npm-package
          path: build/
      - run: integration-test/run-all.sh
      - run: examples/run-all.sh

  publish:
    name: Publish NPM package for published GitHub releases
    needs: [test, integration_test]
    # Only publish when tags matching v* are pushed
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
          registry-url: 'https://registry.npmjs.org'
      - name: Cache npm's local cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - name: Download npm-package from build
        uses: actions/download-artifact@v2
        with:
          name: npm-package
          path: build/
      - name: Publish NPM package
        run: npm publish ./build/lib.cam-xslt-nailgun-*.tgz --access public --tag "$(npm run --silent get-publish-dist-tag)"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
